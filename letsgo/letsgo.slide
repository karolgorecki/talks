Let's Go
Gophers Katowice #1
18:30 28 Sep 2015
Tags: golang, go, katowice, gophers

Karol GÃ³recki
gopher@karolgorecki.com

* quick intro

* 
.image go-creators.png 550 _
.caption Created by: [[https://en.wikipedia.org/wiki/Robert_Griesemer][Robert Griesemer]], [[https://pl.wikipedia.org/wiki/Rob_Pike][Rob Pike]], [[https://pl.wikipedia.org/wiki/Ken_Thompson][Ken Thompson]] 


* Who uses Go?
.image gousers.png

- [[https://github.com/golang/go/wiki/GoUsers][more go users]]

* 
.image feat.jpg _ 920


* setting up the env

* Installation
- [[https://golang.org/dl/][Download]]
- Install
  tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz
- Set `$GOPATH` - usually `$HOME/go`
    # Go environment
    export GOPATH="$HOME/go"
    # Expose the Go binaries in the PATH
    export PATH="$GOPATH/bin:$PATH"
- *$GOPATH* - is used to specify directories outside of `$GOROOT` that contain the source for Go projects and their binaries.
- *$GOROOT* - set it only if you installed Go in custom location.


* Few commands & tools
- *go*env* - print Go environment information
- *go*get* - download and install packages and dependencies
- *go*build* - compile packages and dependencies
- *go*run* - compile and run Go program
- *gofmt* - format go source
- *go*test* - run tests and benchmarks
- *godoc* - shows documentation
- *go*tool*vet* - examines Go source code and reports suspicious constructs


* Editors
- [[https://github.com/joefitzgerald/go-plus][atom]]
- [[http://goclipse.github.io/][eclipse]]
- [[http://sourceforge.net/projects/liteide/files/][liteIDE]]
- [[http://farazdagi.com/blog/2015/vim-as-golang-ide/][vim]]
- [[https://medium.com/@jgautheron/sublime-text-and-go-2b8af99fc16a][sublime text]]
- [[https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins][and more]]


* Workspace
    bin/
        hello                 # command executable
    pkg/
        linux_amd64/          # this will reflect your OS and architecture
            github.com/user/
                stringutil.a  # package object
    src/
        github.com/user/
            hello/
                hello.go      # command source
            stringutil/
                reverse.go    # package source
- *src* - contains Go source files organized into packages (one package per directory)
- *pkg* - contains package objects
- *bin* - contains executable commands


* basics

* Packages
The first statement in a Go source file must be
    
    // foo/foo.go
    package foo

Go's convention is that the *package*name*is*the*last*element*of*the*import*path*: the package imported as "crypto/rot13" should be named rot13.

Every program should have package main and a function main.
Libs don't have main package and main function.

The simplest go program

    package main

    func main() {}


* How imports work?

.image import.png


* Types in Go
- bools
- numerics types ints, uints, floats, complexs
- strings
- arrays
- slices
- structs
- pointers
- functions
- interfaces
- maps
- channels
- aliases - byte (uint8), rune (int32)


* Declaring variables & function 

variables & constants

    var foo string
    var foo string = "Foo"
    var foo = "Foo"
    foo := "Foo" // short assignment, can't be used in global scope
    const string = "Foo"

functions

    func foo() {}
    func foo(name string) {}
    func foo() string {}
    func foo() (name string) {}


grouping vars

    var (
        foo = "Foo"
        number = 10
    )

* Ignoring returned value
In Go we can return multiple values. Sometimes we don't need all of them.
Compiler will yell at you if you have declared unused variables.

Use *underscore* to ignore returned values.

    _, err := getProducts()

* Exporting
The identifier is exported when the first character of the identifier's name is a Unicode upper case letter.

    // can be used by other packages
    var ExportedFoo = "foo"

    // can be used only in this package
    var notExportedMoo = "moo"


* Arrays & slices
An array type definition specifies a length and an element type. It has fixed size.
Array length is part of its type ([4]int and [5]int are distinct, incompatible types)

  var a [4]int
  b := [2]string{"Penn", "Teller"}
  b := [...]string{"Penn", "Teller"}


The slice type is an abstraction built on top of Go's array type.
A slice literal is declared just like an array literal, except you leave out the element count:

    letters := []string{"a", "b", "c", "d"}

A slice can be created with the built-in function called make

    s = make([]byte, 5, 5)
    // s == []byte{0, 0, 0, 0, 0}
    len(s) == 5
    cap(s) == 5

* Maps
A Go map type looks like this: 

    map[KeyType]ValueType

Declare & init

    var m map[string]int
    m = make(map[string]int)
    m["foo"] = 100

    commits := map[string]int{
        "rsc": 3711,
        "r":   2138,
        "gri": 1908,
        "adg": 912,
    }

Get & delete

    val = m["route"]
    val, ok := m["route"]
    delete(m, "route")

* Structs
A struct is a type which contains named fields

    type Circle struct {
      x float64
      y float64
      r float64
    }

Initialization

    var c Circle
    // allocates memory for the fields & sets them to their zero value. Returns a pointer (*Circle)

    c := new(Circle) 
    c := &Circle{}

    c := Circle{x: 0, y: 0, r: 5}
    c := Circle{0, 0, 5} // we can leave off the field names if we know the order

Accessing fields

    c.x = 10

* Structs
Methods

    func (c *Circle) area() float64 {
      return math.Pi * c.r*c.r
    }

    fmt.Println(c.area())

Embeding types

    type Person struct {
      Name string
    }

    func (p *Person) Talk() {
      fmt.Println("Hi, my name is", p.Name)
    }

    type Android struct {
      Person
      Model string
    }




* Branching - if

In Go the expresion must return a bool value

  if 2 == 2 {
    // do some action
  }

The expression may be preceded by a simple statement, which executes before the expression is evaluated.

  if two := getTwo(); two == 2 {
    // you can use "two" here. It's local var
  } else {
    // you can use "two" here. It's local var
  }


* Branching - switch

    switch {
    case x > 2:
        doSomeAction()
    default:
        defaultAction()
    }

    switch getAnimals() {
    case "grumpyCat":
        fallthrough
    case "cat":
        fmt.Println("Meeeowww")
    case "dog":
        fmt.Println("Woofff")
    }

    switch getNumber(); {
    case 0,2,4,6,8,10:
        // we've got even nb
    case 1,3,5,7,9:
        // we've got odd nb
    default:
        // hard to say
    }

* Looping

    // C like loop
    for i:=0; i < 10; i++ {
        doSomeCrazyStuff()
    }

    // while loop
    for j < 100 {
        drinkBeers()
    }

    // forever loop
    for {
        alone()
    }

Range

    for key, value := range someMap {
        fmt.Println(key,value)
    }


* Interfaces

    type worker interface {
        work() (results int)
    } 

    type programmer struct {
        name string
        cash uint32
        energy int
    }

    func (p programmer) work() {
        // implement the work method
    }

    var w worker
    w = newProgrammer("John Doe",100)
    w.work()


* Goroutines
A goroutine is a function that is capable of running concurrently with other functions.
Creating goroutine

    go someFunction()

 
    package main

    import (
        "time"

        "fmt"
    )

    func main() {

        go func() {
            fmt.Println("Hello from Goroutine")
        }()

        fmt.Println("Hello World")
        time.Sleep(time.Second * 1)
    }

* Channels - unbuffered

.image cblock.png _ 600

    ch := make(chan int)
    
* Channels - buffered

.image cbuf.png _ 600

    ch := make(chan int, 10)
    ch <- 100 // adding vals to channel
    <-ch // getting vals from channel

    ch, ok := <- ch // ok tells if the channel is open/closed

* Goroutines and channels

    package main

    import "fmt"

    func main() {

        c := make(chan int)

        go func() {
            for i := 0; i < 10; i++ {
                c <- i
            }

            close(c)
        }()

        fmt.Println(<-c)
        fmt.Println(<-c)
        fmt.Println(<-c)
    }


* To learn more
- [[https://tour.golang.org/welcome/1][Take golang tour]]
- [[https://golang.org/doc/code.html][Read how to write Go code]]
- [[https://golang.org/doc/effective_go.html][Read about Effective Go]]
- [[https://github.com/golang/go/wiki/CodeReviewComments][Check the Go code review comments]]
- [[https://groups.google.com/forum/#!forum/golang-nuts][Visit Golang-nuts]]
- [[http://golangweekly.com/][Subscribe to Golang weekly newsletter]]
- [[https://www.youtube.com/channel/UCO3LEtymiLrgvpb59cNsb8A][Check the official Youtube channel]]
- [[https://www.reddit.com/r/golang][Check out golang on Reddit]]
- [[https://gophers.slack.com/messages/katowice/][join gophers on Slack]]
- [[https://www.youtube.com/watch?v=dQw4w9WgXcQ][Purchase license on golang.com/licenses]]
